/* automatically generated by rust-bindgen 0.65.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const SHPT_NULL: u32 = 0;
pub const SHPT_POINT: u32 = 1;
pub const SHPT_ARC: u32 = 3;
pub const SHPT_POLYGON: u32 = 5;
pub const SHPT_MULTIPOINT: u32 = 8;
pub const SHPT_POINTZ: u32 = 11;
pub const SHPT_ARCZ: u32 = 13;
pub const SHPT_POLYGONZ: u32 = 15;
pub const SHPT_MULTIPOINTZ: u32 = 18;
pub const SHPT_POINTM: u32 = 21;
pub const SHPT_ARCM: u32 = 23;
pub const SHPT_POLYGONM: u32 = 25;
pub const SHPT_MULTIPOINTM: u32 = 28;
pub const SHPT_MULTIPATCH: u32 = 31;
pub const SHPP_TRISTRIP: u32 = 0;
pub const SHPP_TRIFAN: u32 = 1;
pub const SHPP_OUTERRING: u32 = 2;
pub const SHPP_INNERRING: u32 = 3;
pub const SHPP_FIRSTRING: u32 = 4;
pub const SHPP_RING: u32 = 5;
pub const MAX_SUBNODE: u32 = 4;
pub const MAX_DEFAULT_TREE_DEPTH: u32 = 12;
pub const XBASE_FLDHDR_SZ: u32 = 32;
pub const XBASE_FLDNAME_LEN_READ: u32 = 11;
pub const XBASE_FLDNAME_LEN_WRITE: u32 = 10;
pub const XBASE_FLD_MAX_WIDTH: u32 = 255;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type SAFile = *mut ::std::os::raw::c_int;
pub type SAOffset = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SAHooks {
    pub FOpen: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            access: *const ::std::os::raw::c_char,
        ) -> SAFile,
    >,
    pub FRead: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            size: SAOffset,
            nmemb: SAOffset,
            file: SAFile,
        ) -> SAOffset,
    >,
    pub FWrite: ::std::option::Option<
        unsafe extern "C" fn(
            p: *mut ::std::os::raw::c_void,
            size: SAOffset,
            nmemb: SAOffset,
            file: SAFile,
        ) -> SAOffset,
    >,
    pub FSeek: ::std::option::Option<
        unsafe extern "C" fn(
            file: SAFile,
            offset: SAOffset,
            whence: ::std::os::raw::c_int,
        ) -> SAOffset,
    >,
    pub FTell: ::std::option::Option<unsafe extern "C" fn(file: SAFile) -> SAOffset>,
    pub FFlush: ::std::option::Option<unsafe extern "C" fn(file: SAFile) -> ::std::os::raw::c_int>,
    pub FClose: ::std::option::Option<unsafe extern "C" fn(file: SAFile) -> ::std::os::raw::c_int>,
    pub Remove: ::std::option::Option<
        unsafe extern "C" fn(filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub Error: ::std::option::Option<unsafe extern "C" fn(message: *const ::std::os::raw::c_char)>,
    pub Atof:
        ::std::option::Option<unsafe extern "C" fn(str_: *const ::std::os::raw::c_char) -> f64>,
}
#[test]
fn bindgen_test_layout_SAHooks() {
    const UNINIT: ::std::mem::MaybeUninit<SAHooks> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SAHooks>(),
        80usize,
        concat!("Size of: ", stringify!(SAHooks))
    );
    assert_eq!(
        ::std::mem::align_of::<SAHooks>(),
        8usize,
        concat!("Alignment of ", stringify!(SAHooks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FOpen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FOpen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FRead) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FWrite) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FSeek) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FSeek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FTell) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FTell)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FFlush) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FFlush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FClose) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(FClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Remove) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Error) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(Error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Atof) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SAHooks),
            "::",
            stringify!(Atof)
        )
    );
}
extern "C" {
    pub fn SASetupDefaultHooks(psHooks: *mut SAHooks);
}
extern "C" {
    pub fn SASetupUtf8Hooks(psHooks: *mut SAHooks);
}
pub type SHPObject = tagSHPObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHPInfo {
    pub sHooks: SAHooks,
    pub fpSHP: SAFile,
    pub fpSHX: SAFile,
    pub nShapeType: ::std::os::raw::c_int,
    pub nFileSize: ::std::os::raw::c_uint,
    pub nRecords: ::std::os::raw::c_int,
    pub nMaxRecords: ::std::os::raw::c_int,
    pub panRecOffset: *mut ::std::os::raw::c_uint,
    pub panRecSize: *mut ::std::os::raw::c_uint,
    pub adBoundsMin: [f64; 4usize],
    pub adBoundsMax: [f64; 4usize],
    pub bUpdated: ::std::os::raw::c_int,
    pub pabyRec: *mut ::std::os::raw::c_uchar,
    pub nBufSize: ::std::os::raw::c_int,
    pub bFastModeReadObject: ::std::os::raw::c_int,
    pub pabyObjectBuf: *mut ::std::os::raw::c_uchar,
    pub nObjectBufSize: ::std::os::raw::c_int,
    pub psCachedObject: *mut SHPObject,
}
#[test]
fn bindgen_test_layout_SHPInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SHPInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SHPInfo>(),
        240usize,
        concat!("Size of: ", stringify!(SHPInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SHPInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SHPInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sHooks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(sHooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpSHP) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(fpSHP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpSHX) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(fpSHX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nShapeType) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nShapeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nFileSize) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nFileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nRecords) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nRecords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nMaxRecords) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nMaxRecords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panRecOffset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(panRecOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panRecSize) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(panRecSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adBoundsMin) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(adBoundsMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adBoundsMax) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(adBoundsMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUpdated) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(bUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pabyRec) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(pabyRec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nBufSize) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nBufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFastModeReadObject) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(bFastModeReadObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pabyObjectBuf) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(pabyObjectBuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nObjectBufSize) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(nObjectBufSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psCachedObject) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPInfo),
            "::",
            stringify!(psCachedObject)
        )
    );
}
pub type SHPHandle = *mut SHPInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSHPObject {
    pub nSHPType: ::std::os::raw::c_int,
    pub nShapeId: ::std::os::raw::c_int,
    pub nParts: ::std::os::raw::c_int,
    pub panPartStart: *mut ::std::os::raw::c_int,
    pub panPartType: *mut ::std::os::raw::c_int,
    pub nVertices: ::std::os::raw::c_int,
    pub padfX: *mut f64,
    pub padfY: *mut f64,
    pub padfZ: *mut f64,
    pub padfM: *mut f64,
    pub dfXMin: f64,
    pub dfYMin: f64,
    pub dfZMin: f64,
    pub dfMMin: f64,
    pub dfXMax: f64,
    pub dfYMax: f64,
    pub dfZMax: f64,
    pub dfMMax: f64,
    pub bMeasureIsUsed: ::std::os::raw::c_int,
    pub bFastModeReadObject: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tagSHPObject() {
    const UNINIT: ::std::mem::MaybeUninit<tagSHPObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tagSHPObject>(),
        144usize,
        concat!("Size of: ", stringify!(tagSHPObject))
    );
    assert_eq!(
        ::std::mem::align_of::<tagSHPObject>(),
        8usize,
        concat!("Alignment of ", stringify!(tagSHPObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nSHPType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(nSHPType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nShapeId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(nShapeId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nParts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(nParts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panPartStart) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(panPartStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panPartType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(panPartType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nVertices) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(nVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padfX) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(padfX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padfY) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(padfY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padfZ) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(padfZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padfM) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(padfM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfXMin) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfXMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfYMin) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfYMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfZMin) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfZMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfMMin) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfMMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfXMax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfXMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfYMax) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfYMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfZMax) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfZMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfMMax) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(dfMMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bMeasureIsUsed) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(bMeasureIsUsed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bFastModeReadObject) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(tagSHPObject),
            "::",
            stringify!(bFastModeReadObject)
        )
    );
}
extern "C" {
    pub fn SHPOpen(
        pszShapeFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
    ) -> SHPHandle;
}
extern "C" {
    pub fn SHPOpenLL(
        pszShapeFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> SHPHandle;
}
extern "C" {
    pub fn SHPOpenLLEx(
        pszShapeFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
        bRestoreSHX: ::std::os::raw::c_int,
    ) -> SHPHandle;
}
extern "C" {
    pub fn SHPRestoreSHX(
        pszShapeFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPSetFastModeReadObject(hSHP: SHPHandle, bFastMode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SHPCreate(
        pszShapeFile: *const ::std::os::raw::c_char,
        nShapeType: ::std::os::raw::c_int,
    ) -> SHPHandle;
}
extern "C" {
    pub fn SHPCreateLL(
        pszShapeFile: *const ::std::os::raw::c_char,
        nShapeType: ::std::os::raw::c_int,
        psHooks: *mut SAHooks,
    ) -> SHPHandle;
}
extern "C" {
    pub fn SHPGetInfo(
        hSHP: SHPHandle,
        pnEntities: *mut ::std::os::raw::c_int,
        pnShapeType: *mut ::std::os::raw::c_int,
        padfMinBound: *mut f64,
        padfMaxBound: *mut f64,
    );
}
extern "C" {
    pub fn SHPReadObject(hSHP: SHPHandle, iShape: ::std::os::raw::c_int) -> *mut SHPObject;
}
extern "C" {
    pub fn SHPWriteObject(
        hSHP: SHPHandle,
        iShape: ::std::os::raw::c_int,
        psObject: *mut SHPObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPDestroyObject(psObject: *mut SHPObject);
}
extern "C" {
    pub fn SHPComputeExtents(psObject: *mut SHPObject);
}
extern "C" {
    pub fn SHPCreateObject(
        nSHPType: ::std::os::raw::c_int,
        nShapeId: ::std::os::raw::c_int,
        nParts: ::std::os::raw::c_int,
        panPartStart: *const ::std::os::raw::c_int,
        panPartType: *const ::std::os::raw::c_int,
        nVertices: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZ: *const f64,
        padfM: *const f64,
    ) -> *mut SHPObject;
}
extern "C" {
    pub fn SHPCreateSimpleObject(
        nSHPType: ::std::os::raw::c_int,
        nVertices: ::std::os::raw::c_int,
        padfX: *const f64,
        padfY: *const f64,
        padfZ: *const f64,
    ) -> *mut SHPObject;
}
extern "C" {
    pub fn SHPRewindObject(hSHP: SHPHandle, psObject: *mut SHPObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPClose(hSHP: SHPHandle);
}
extern "C" {
    pub fn SHPWriteHeader(hSHP: SHPHandle);
}
extern "C" {
    pub fn SHPTypeName(nSHPType: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SHPPartTypeName(nPartType: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shape_tree_node {
    pub adfBoundsMin: [f64; 4usize],
    pub adfBoundsMax: [f64; 4usize],
    pub nShapeCount: ::std::os::raw::c_int,
    pub panShapeIds: *mut ::std::os::raw::c_int,
    pub papsShapeObj: *mut *mut SHPObject,
    pub nSubNodes: ::std::os::raw::c_int,
    pub apsSubNode: [*mut shape_tree_node; 4usize],
}
#[test]
fn bindgen_test_layout_shape_tree_node() {
    const UNINIT: ::std::mem::MaybeUninit<shape_tree_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<shape_tree_node>(),
        128usize,
        concat!("Size of: ", stringify!(shape_tree_node))
    );
    assert_eq!(
        ::std::mem::align_of::<shape_tree_node>(),
        8usize,
        concat!("Alignment of ", stringify!(shape_tree_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adfBoundsMin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(adfBoundsMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adfBoundsMax) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(adfBoundsMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nShapeCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(nShapeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panShapeIds) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(panShapeIds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).papsShapeObj) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(papsShapeObj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nSubNodes) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(nSubNodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apsSubNode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(shape_tree_node),
            "::",
            stringify!(apsSubNode)
        )
    );
}
pub type SHPTreeNode = shape_tree_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHPTree {
    pub hSHP: SHPHandle,
    pub nMaxDepth: ::std::os::raw::c_int,
    pub nDimension: ::std::os::raw::c_int,
    pub nTotalCount: ::std::os::raw::c_int,
    pub psRoot: *mut SHPTreeNode,
}
#[test]
fn bindgen_test_layout_SHPTree() {
    const UNINIT: ::std::mem::MaybeUninit<SHPTree> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SHPTree>(),
        32usize,
        concat!("Size of: ", stringify!(SHPTree))
    );
    assert_eq!(
        ::std::mem::align_of::<SHPTree>(),
        8usize,
        concat!("Alignment of ", stringify!(SHPTree))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hSHP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPTree),
            "::",
            stringify!(hSHP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nMaxDepth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPTree),
            "::",
            stringify!(nMaxDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nDimension) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPTree),
            "::",
            stringify!(nDimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nTotalCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPTree),
            "::",
            stringify!(nTotalCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).psRoot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SHPTree),
            "::",
            stringify!(psRoot)
        )
    );
}
extern "C" {
    pub fn SHPCreateTree(
        hSHP: SHPHandle,
        nDimension: ::std::os::raw::c_int,
        nMaxDepth: ::std::os::raw::c_int,
        padfBoundsMin: *mut f64,
        padfBoundsMax: *mut f64,
    ) -> *mut SHPTree;
}
extern "C" {
    pub fn SHPDestroyTree(hTree: *mut SHPTree);
}
extern "C" {
    pub fn SHPWriteTree(
        hTree: *mut SHPTree,
        pszFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPTreeAddShapeId(
        hTree: *mut SHPTree,
        psObject: *mut SHPObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPTreeRemoveShapeId(
        hTree: *mut SHPTree,
        nShapeId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPTreeTrimExtraNodes(hTree: *mut SHPTree);
}
extern "C" {
    pub fn SHPTreeFindLikelyShapes(
        hTree: *mut SHPTree,
        padfBoundsMin: *mut f64,
        padfBoundsMax: *mut f64,
        arg1: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPCheckBoundsOverlap(
        arg1: *mut f64,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: *mut f64,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPSearchDiskTree(
        fp: *mut FILE,
        padfBoundsMin: *mut f64,
        padfBoundsMax: *mut f64,
        pnShapeCount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHPDiskTreeInfo {
    _unused: [u8; 0],
}
pub type SHPTreeDiskHandle = *mut SHPDiskTreeInfo;
extern "C" {
    pub fn SHPOpenDiskTree(
        pszQIXFilename: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> SHPTreeDiskHandle;
}
extern "C" {
    pub fn SHPCloseDiskTree(hDiskTree: SHPTreeDiskHandle);
}
extern "C" {
    pub fn SHPSearchDiskTreeEx(
        hDiskTree: SHPTreeDiskHandle,
        padfBoundsMin: *mut f64,
        padfBoundsMax: *mut f64,
        pnShapeCount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn SHPWriteTreeLL(
        hTree: *mut SHPTree,
        pszFilename: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SBNSearchInfo {
    _unused: [u8; 0],
}
pub type SBNSearchHandle = *mut SBNSearchInfo;
extern "C" {
    pub fn SBNOpenDiskTree(
        pszSBNFilename: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> SBNSearchHandle;
}
extern "C" {
    pub fn SBNCloseDiskTree(hSBN: SBNSearchHandle);
}
extern "C" {
    pub fn SBNSearchDiskTree(
        hSBN: SBNSearchHandle,
        padfBoundsMin: *mut f64,
        padfBoundsMax: *mut f64,
        pnShapeCount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn SBNSearchDiskTreeInteger(
        hSBN: SBNSearchHandle,
        bMinX: ::std::os::raw::c_int,
        bMinY: ::std::os::raw::c_int,
        bMaxX: ::std::os::raw::c_int,
        bMaxY: ::std::os::raw::c_int,
        pnShapeCount: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn SBNSearchFreeIds(panShapeId: *mut ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DBFInfo {
    pub sHooks: SAHooks,
    pub fp: SAFile,
    pub nRecords: ::std::os::raw::c_int,
    pub nRecordLength: ::std::os::raw::c_int,
    pub nHeaderLength: ::std::os::raw::c_int,
    pub nFields: ::std::os::raw::c_int,
    pub panFieldOffset: *mut ::std::os::raw::c_int,
    pub panFieldSize: *mut ::std::os::raw::c_int,
    pub panFieldDecimals: *mut ::std::os::raw::c_int,
    pub pachFieldType: *mut ::std::os::raw::c_char,
    pub pszHeader: *mut ::std::os::raw::c_char,
    pub nCurrentRecord: ::std::os::raw::c_int,
    pub bCurrentRecordModified: ::std::os::raw::c_int,
    pub pszCurrentRecord: *mut ::std::os::raw::c_char,
    pub nWorkFieldLength: ::std::os::raw::c_int,
    pub pszWorkField: *mut ::std::os::raw::c_char,
    pub bNoHeader: ::std::os::raw::c_int,
    pub bUpdated: ::std::os::raw::c_int,
    pub fieldValue: DBFInfo__bindgen_ty_1,
    pub iLanguageDriver: ::std::os::raw::c_int,
    pub pszCodePage: *mut ::std::os::raw::c_char,
    pub nUpdateYearSince1900: ::std::os::raw::c_int,
    pub nUpdateMonth: ::std::os::raw::c_int,
    pub nUpdateDay: ::std::os::raw::c_int,
    pub bWriteEndOfFileChar: ::std::os::raw::c_int,
    pub bRequireNextWriteSeek: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DBFInfo__bindgen_ty_1 {
    pub dfDoubleField: f64,
    pub nIntField: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DBFInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DBFInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DBFInfo__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(DBFInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DBFInfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(DBFInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfDoubleField) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo__bindgen_ty_1),
            "::",
            stringify!(dfDoubleField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nIntField) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo__bindgen_ty_1),
            "::",
            stringify!(nIntField)
        )
    );
}
#[test]
fn bindgen_test_layout_DBFInfo() {
    const UNINIT: ::std::mem::MaybeUninit<DBFInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DBFInfo>(),
        232usize,
        concat!("Size of: ", stringify!(DBFInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DBFInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(DBFInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sHooks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(sHooks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nRecords) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nRecords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nRecordLength) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nRecordLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nHeaderLength) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nHeaderLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nFields) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nFields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panFieldOffset) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(panFieldOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panFieldSize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(panFieldSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).panFieldDecimals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(panFieldDecimals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pachFieldType) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(pachFieldType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pszHeader) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(pszHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nCurrentRecord) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nCurrentRecord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bCurrentRecordModified) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(bCurrentRecordModified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pszCurrentRecord) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(pszCurrentRecord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nWorkFieldLength) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nWorkFieldLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pszWorkField) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(pszWorkField)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bNoHeader) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(bNoHeader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bUpdated) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(bUpdated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldValue) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(fieldValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iLanguageDriver) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(iLanguageDriver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pszCodePage) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(pszCodePage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nUpdateYearSince1900) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nUpdateYearSince1900)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nUpdateMonth) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nUpdateMonth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nUpdateDay) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(nUpdateDay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bWriteEndOfFileChar) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(bWriteEndOfFileChar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bRequireNextWriteSeek) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(DBFInfo),
            "::",
            stringify!(bRequireNextWriteSeek)
        )
    );
}
pub type DBFHandle = *mut DBFInfo;
pub const DBFFieldType_FTString: DBFFieldType = 0;
pub const DBFFieldType_FTInteger: DBFFieldType = 1;
pub const DBFFieldType_FTDouble: DBFFieldType = 2;
pub const DBFFieldType_FTLogical: DBFFieldType = 3;
pub const DBFFieldType_FTDate: DBFFieldType = 4;
pub const DBFFieldType_FTInvalid: DBFFieldType = 5;
pub type DBFFieldType = ::std::os::raw::c_int;
extern "C" {
    pub fn DBFOpen(
        pszDBFFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
    ) -> DBFHandle;
}
extern "C" {
    pub fn DBFOpenLL(
        pszDBFFile: *const ::std::os::raw::c_char,
        pszAccess: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> DBFHandle;
}
extern "C" {
    pub fn DBFCreate(pszDBFFile: *const ::std::os::raw::c_char) -> DBFHandle;
}
extern "C" {
    pub fn DBFCreateEx(
        pszDBFFile: *const ::std::os::raw::c_char,
        pszCodePage: *const ::std::os::raw::c_char,
    ) -> DBFHandle;
}
extern "C" {
    pub fn DBFCreateLL(
        pszDBFFile: *const ::std::os::raw::c_char,
        pszCodePage: *const ::std::os::raw::c_char,
        psHooks: *mut SAHooks,
    ) -> DBFHandle;
}
extern "C" {
    pub fn DBFGetFieldCount(psDBF: DBFHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFGetRecordCount(psDBF: DBFHandle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFAddField(
        hDBF: DBFHandle,
        pszFieldName: *const ::std::os::raw::c_char,
        eType: DBFFieldType,
        nWidth: ::std::os::raw::c_int,
        nDecimals: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFAddNativeFieldType(
        hDBF: DBFHandle,
        pszFieldName: *const ::std::os::raw::c_char,
        chType: ::std::os::raw::c_char,
        nWidth: ::std::os::raw::c_int,
        nDecimals: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFDeleteField(hDBF: DBFHandle, iField: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFReorderFields(
        psDBF: DBFHandle,
        panMap: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFAlterFieldDefn(
        psDBF: DBFHandle,
        iField: ::std::os::raw::c_int,
        pszFieldName: *const ::std::os::raw::c_char,
        chType: ::std::os::raw::c_char,
        nWidth: ::std::os::raw::c_int,
        nDecimals: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFGetFieldInfo(
        psDBF: DBFHandle,
        iField: ::std::os::raw::c_int,
        pszFieldName: *mut ::std::os::raw::c_char,
        pnWidth: *mut ::std::os::raw::c_int,
        pnDecimals: *mut ::std::os::raw::c_int,
    ) -> DBFFieldType;
}
extern "C" {
    pub fn DBFGetFieldIndex(
        psDBF: DBFHandle,
        pszFieldName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFReadIntegerAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFReadDoubleAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn DBFReadStringAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DBFReadLogicalAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DBFIsAttributeNULL(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteIntegerAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
        nFieldValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteDoubleAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
        dFieldValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteStringAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
        pszFieldValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteNULLAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteLogicalAttribute(
        hDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
        lFieldValue: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFWriteAttributeDirectly(
        psDBF: DBFHandle,
        hEntity: ::std::os::raw::c_int,
        iField: ::std::os::raw::c_int,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFReadTuple(
        psDBF: DBFHandle,
        hEntity: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DBFWriteTuple(
        psDBF: DBFHandle,
        hEntity: ::std::os::raw::c_int,
        pRawTuple: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFIsRecordDeleted(
        psDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFMarkRecordDeleted(
        psDBF: DBFHandle,
        iShape: ::std::os::raw::c_int,
        bIsDeleted: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DBFCloneEmpty(psDBF: DBFHandle, pszFilename: *const ::std::os::raw::c_char)
        -> DBFHandle;
}
extern "C" {
    pub fn DBFClose(hDBF: DBFHandle);
}
extern "C" {
    pub fn DBFUpdateHeader(hDBF: DBFHandle);
}
extern "C" {
    pub fn DBFGetNativeFieldType(
        hDBF: DBFHandle,
        iField: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn DBFGetCodePage(psDBF: DBFHandle) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn DBFSetLastModifiedDate(
        psDBF: DBFHandle,
        nYYSince1900: ::std::os::raw::c_int,
        nMM: ::std::os::raw::c_int,
        nDD: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn DBFSetWriteEndOfFileChar(psDBF: DBFHandle, bWriteFlag: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
